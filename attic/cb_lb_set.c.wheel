#include "cb_lb_set.h"


#define BITMASKFMT "%c%c%c%c%c%c%c%c,%c%c%c%c%c%c%c%c," \
                   "%c%c%c%c%c%c%c%c,%c%c%c%c%c%c%c%c," \
                   "%c%c%c%c%c%c%c%c,%c%c%c%c%c%c%c%c," \
                   "%c%c%c%c%c%c%c%c,%c%c%c%c%c%c%c%c"

#define BITMASK(x) \
    (x & ((uint64_t)1 << 63)) ? '1' : '0', \
    (x & ((uint64_t)1 << 62)) ? '1' : '0', \
    (x & ((uint64_t)1 << 61)) ? '1' : '0', \
    (x & ((uint64_t)1 << 60)) ? '1' : '0', \
    (x & ((uint64_t)1 << 59)) ? '1' : '0', \
    (x & ((uint64_t)1 << 58)) ? '1' : '0', \
    (x & ((uint64_t)1 << 57)) ? '1' : '0', \
    (x & ((uint64_t)1 << 56)) ? '1' : '0', \
    (x & ((uint64_t)1 << 55)) ? '1' : '0', \
    (x & ((uint64_t)1 << 54)) ? '1' : '0', \
    (x & ((uint64_t)1 << 53)) ? '1' : '0', \
    (x & ((uint64_t)1 << 52)) ? '1' : '0', \
    (x & ((uint64_t)1 << 51)) ? '1' : '0', \
    (x & ((uint64_t)1 << 50)) ? '1' : '0', \
    (x & ((uint64_t)1 << 49)) ? '1' : '0', \
    (x & ((uint64_t)1 << 48)) ? '1' : '0', \
    (x & ((uint64_t)1 << 47)) ? '1' : '0', \
    (x & ((uint64_t)1 << 46)) ? '1' : '0', \
    (x & ((uint64_t)1 << 45)) ? '1' : '0', \
    (x & ((uint64_t)1 << 44)) ? '1' : '0', \
    (x & ((uint64_t)1 << 43)) ? '1' : '0', \
    (x & ((uint64_t)1 << 42)) ? '1' : '0', \
    (x & ((uint64_t)1 << 41)) ? '1' : '0', \
    (x & ((uint64_t)1 << 40)) ? '1' : '0', \
    (x & ((uint64_t)1 << 39)) ? '1' : '0', \
    (x & ((uint64_t)1 << 38)) ? '1' : '0', \
    (x & ((uint64_t)1 << 37)) ? '1' : '0', \
    (x & ((uint64_t)1 << 36)) ? '1' : '0', \
    (x & ((uint64_t)1 << 35)) ? '1' : '0', \
    (x & ((uint64_t)1 << 34)) ? '1' : '0', \
    (x & ((uint64_t)1 << 33)) ? '1' : '0', \
    (x & ((uint64_t)1 << 32)) ? '1' : '0', \
    (x & ((uint64_t)1 << 31)) ? '1' : '0', \
    (x & ((uint64_t)1 << 30)) ? '1' : '0', \
    (x & ((uint64_t)1 << 29)) ? '1' : '0', \
    (x & ((uint64_t)1 << 28)) ? '1' : '0', \
    (x & ((uint64_t)1 << 27)) ? '1' : '0', \
    (x & ((uint64_t)1 << 26)) ? '1' : '0', \
    (x & ((uint64_t)1 << 25)) ? '1' : '0', \
    (x & ((uint64_t)1 << 24)) ? '1' : '0', \
    (x & ((uint64_t)1 << 23)) ? '1' : '0', \
    (x & ((uint64_t)1 << 22)) ? '1' : '0', \
    (x & ((uint64_t)1 << 21)) ? '1' : '0', \
    (x & ((uint64_t)1 << 20)) ? '1' : '0', \
    (x & ((uint64_t)1 << 19)) ? '1' : '0', \
    (x & ((uint64_t)1 << 18)) ? '1' : '0', \
    (x & ((uint64_t)1 << 17)) ? '1' : '0', \
    (x & ((uint64_t)1 << 16)) ? '1' : '0', \
    (x & ((uint64_t)1 << 15)) ? '1' : '0', \
    (x & ((uint64_t)1 << 14)) ? '1' : '0', \
    (x & ((uint64_t)1 << 13)) ? '1' : '0', \
    (x & ((uint64_t)1 << 12)) ? '1' : '0', \
    (x & ((uint64_t)1 << 11)) ? '1' : '0', \
    (x & ((uint64_t)1 << 10)) ? '1' : '0', \
    (x & ((uint64_t)1 << 9)) ? '1' : '0', \
    (x & ((uint64_t)1 << 8)) ? '1' : '0', \
    (x & ((uint64_t)1 << 7)) ? '1' : '0', \
    (x & ((uint64_t)1 << 6)) ? '1' : '0', \
    (x & ((uint64_t)1 << 5)) ? '1' : '0', \
    (x & ((uint64_t)1 << 4)) ? '1' : '0', \
    (x & ((uint64_t)1 << 3)) ? '1' : '0', \
    (x & ((uint64_t)1 << 2)) ? '1' : '0', \
    (x & ((uint64_t)1 << 1)) ? '1' : '0', \
    (x & ((uint64_t)1 << 0)) ? '1' : '0'


//* FIXME move these out */
CB_INLINE bool
is_power_of_2_size(size_t x)
{
    return (x > 0) & ((x ^ (x - 1)) == (x | (x - 1)));
}


CB_INLINE size_t
power_of_2_size_gt(size_t x)
{
    size_t result = 0;
    while (x) { result |= x; x >>= 1; }
    result += 1;
    assert(is_power_of_2_size(result));
    return result;
}


CB_INLINE size_t
power_of_2_size_gte(size_t x)
{
    size_t result = (is_power_of_2_size(x) ? x : power_of_2_size_gt(x));
    assert(is_power_of_2_size(result));
    return result;
}


CB_INLINE unsigned int
log2_of_power_of_2_size(size_t x)
{
    assert(is_power_of_2_size(x));
    unsigned int result = 0;
    while (x != 1) { x >>= 1; result++; }
    return result;
}


/*
 * Returns a bitmask with a 1 in the position of each contiguous least-
 * significant bit which was zero in x. (e.g. 01100b -> 00011b)
 */
CB_INLINE size_t
contiguous_lsb_zeros_mask(size_t x)
{
    return (x ^ (x - 1)) >> 1;
}

/*
 * __builtin_popcount() only handles 'unsigned int' type (32 bits).  This is
 * a 64-bit popcount.
 */
CB_INLINE unsigned int
popcount64(uint64_t v)
{
    return __builtin_popcount(v & 0xFFFFFFFF) +
           __builtin_popcount((v >> 32) & 0xFFFFFFFF);
}


/*
 * Returns a bitmask representing whether or not each of the LISTs of head[i]
 * are non-empty.
 */
static cb_offset_t
derive_presence_bitmask(struct cb_lb_set *lbset)
{
    cb_offset_t presence_bitmask = 0;

    /* NOTE: The termination at i > 1 is intentional, as we want head[1] to be
     * the last sampled bucket, head[0] being the special bucket.
     */
    for (int i = 65; i > 1; --i)
    {
        presence_bitmask <<= 1;
        presence_bitmask |= !(LIST_EMPTY(&(lbset->head[i-1])));
    }

    return presence_bitmask;
}


static unsigned int
bucket_for(cb_offset_t val)
{
    if (val == 0)
        return 0;
    else if (val == 1)
        return 1;
    else
    {
        size_t x = power_of_2_size_gt(val >> 1);
        size_t y = contiguous_lsb_zeros_mask(x);
        size_t z = popcount64(y);
        size_t b = z + 1;

#if 0
        cb_log_debug("===begin bucket_for(%ju)", (uintmax_t)val);

        cb_log_debug("val:\t" BITMASKFMT "", BITMASK(val));
        cb_log_debug("x:\t" BITMASKFMT "", BITMASK(x));
        cb_log_debug("y:\t" BITMASKFMT "", BITMASK(y));
        cb_log_debug("z:\t" BITMASKFMT "", BITMASK(z));
        cb_log_debug("b:\t" BITMASKFMT "", BITMASK(b));
        cb_log_debug("bucket: %ju", b);

        cb_log_debug("===end bucket_for(%ju)", (uintmax_t)val);
#endif

        return b;
    }
}


static bool
cb_lb_set_validate_bucket(struct cb_lb_set *lbset,
                          unsigned int      bucket,
                          size_t            bucket_start,
                          size_t            bucket_end,
                          bool              do_print)
{
    struct cb_lb_entry *curr;
    bool ok = true;

#if 0
    cb_log_debug("Called with (%p, %u, %zu, %zu, %d)",
                 lbset,
                 bucket,
                 bucket_start,
                 bucket_end,
                 do_print);
#endif

    LIST_FOREACH(curr, &(lbset->head[bucket]), linkage)
    {
        ok &= (curr->lower_bound >= bucket_start &&
               curr->lower_bound < bucket_end);
    }

    if (!ok && do_print)
    {
        cb_log_debug("bucket[%d][%ju,%ju) error:",
                     bucket,
                     (uintmax_t)bucket_start,
                     (uintmax_t)bucket_end);

        LIST_FOREACH(curr, &(lbset->head[bucket]), linkage)
        {
            bool element_ok = (curr->lower_bound >= bucket_start &&
                               curr->lower_bound < bucket_end);

            (void)element_ok;

            cb_log_debug("\t%c%ju %p",
                         element_ok ? ' ' : '*',
                         (uintmax_t)curr->lower_bound,
                         curr);
        }

    }

    return ok;
}

static bool
cb_lb_set_validate(struct cb_lb_set *lbset)
{
    bool ok = true;
    size_t bucket_start,
           bucket_end;
    bool do_print = false;

//FIXME, check num_entries

    cb_log_debug("Validating...");

top:
    /* Validate bucket 0 */
    ok &= cb_lb_set_validate_bucket(lbset,
                                    0,
                                    lbset->lowest_bound,
                                    lbset->lowest_bound + 1,
                                    do_print);

    /* Validate bucket 1 */
    ok &= cb_lb_set_validate_bucket(lbset,
                                    1,
                                    lbset->lowest_bound + 1,
                                    lbset->lowest_bound + 2,
                                    do_print);


    /* Validate the remainder of buckets */
    bucket_start = (1 << 1);
    bucket_end   = (bucket_start << 1);
    for (int i = 2; i < 65; ++i)
    {
        ok &= cb_lb_set_validate_bucket(lbset,
                                        i,
                                        lbset->lowest_bound + bucket_start,
                                        lbset->lowest_bound + bucket_end,
                                        do_print);
        bucket_start <<= 1;
        bucket_end   <<= 1;
    }

    if (!ok && do_print == false)
    {
        do_print = true;
        goto top;
    }

    cb_log_debug("Validation...%s", ok? "SUCCESS" : "FAILED");
    return ok;
}


int
cb_lb_set_init(struct cb_lb_set *lbset)
{
    lbset->num_entries = 0;

    for (int i = 0; i < 65; ++i)
        LIST_INIT(&(lbset->head[i]));

    return 0;
}


void
cb_lb_set_print(struct cb_lb_set *lbset)
{
    cb_offset_t presence_bitmask = derive_presence_bitmask(lbset);
    cb_offset_t zeros_mask = contiguous_lsb_zeros_mask(presence_bitmask);
    unsigned int num_zeros = popcount64(zeros_mask);
    struct cb_lb_entry *curr;

    cb_log_debug("===BEGIN cb_lb_set %p===", lbset);
    cb_log_debug("presence: %#010jx", (uintmax_t)presence_bitmask);
    cb_log_debug("zeros_mask: %#010jx", (uintmax_t)zeros_mask);
    cb_log_debug("num_zeros: %u", num_zeros);

    for (int i = 0; i < 65; ++i)
    {
        cb_log_debug("head[%d]: ", i);

        LIST_FOREACH(curr, &(lbset->head[i]), linkage)
        {
            cb_log_debug("%ju, ", (uintmax_t)curr->lower_bound);
        }

        cb_log_debug("");
    }

    cb_log_debug("===END cb_lb_set %p===", lbset);
}


static void
cb_lb_set_advance(struct cb_lb_set *lbset)
{

    cb_log_debug("Begin advance");
    while (LIST_EMPTY(&(lbset->head[0])))
    {
        cb_log_debug("...advance");
        cb_offset_t presence_bitmask = derive_presence_bitmask(lbset);
        cb_offset_t zeros_mask = contiguous_lsb_zeros_mask(presence_bitmask);
        unsigned int num_zeros = popcount64(zeros_mask);
        //unsigned int incr = 1 << num_zeros;
        unsigned int incr = num_zeros == 0 ? 1 : 1 << (num_zeros - 1);
        unsigned int redistribute_bucket = 1 + num_zeros;
        LIST_HEAD(, cb_lb_entry) redistribute_list = LIST_HEAD_INITIALIZER(&redistribute_list);
        struct cb_lb_entry *curr, *tmp;

        cb_log_debug("p: " BITMASKFMT "", BITMASK(presence_bitmask));
        cb_log_debug("z: " BITMASKFMT "", BITMASK(zeros_mask));
        cb_log_debug("num_zeros: %u", num_zeros);
        cb_log_debug("redistribute_bucket: %u", redistribute_bucket);
        cb_log_debug("lowest_bound %ju += incr %ju = %ju",
                     (uintmax_t)lbset->lowest_bound,
                     (uintmax_t)incr,
                     (uintmax_t)(lbset->lowest_bound + incr));

        assert(incr > 0);
        lbset->lowest_bound += incr;

        LIST_SWAP(&redistribute_list,
                  &(lbset->head[redistribute_bucket]),
                  cb_lb_entry,
                  linkage);

        LIST_FOREACH(curr, &redistribute_list, linkage)
        {
            cb_log_debug("*: " BITMASKFMT " %p @ %ju (%ju+%ju)",
                         BITMASK(curr->lower_bound),
                         curr,
                         (uintmax_t)curr->lower_bound,
                         (uintmax_t)lbset->lowest_bound,
                         (uintmax_t)(curr->lower_bound - lbset->lowest_bound));
        }

        LIST_FOREACH_SAFE(curr, &redistribute_list, linkage, tmp)
        {
            cb_offset_t diff = curr->lower_bound - lbset->lowest_bound;
            unsigned int bucket = bucket_for(diff);

            cb_log_debug("Re-adding %p @ %ju (%ju+%ju) to bucket[%u]",
                         curr,
                         (uintmax_t)curr->lower_bound,
                         (uintmax_t)lbset->lowest_bound,
                         (uintmax_t)diff,
                         bucket);

            LIST_INSERT_HEAD(&(lbset->head[bucket]), curr, linkage);
        }

        if (redistribute_bucket < 64)
        {
            cb_log_debug("Doing another redistribute!!!");
            LIST_INIT(&redistribute_list);

            LIST_SWAP(&redistribute_list,
                      &(lbset->head[redistribute_bucket+1]),
                      cb_lb_entry,
                      linkage);

            LIST_FOREACH(curr, &redistribute_list, linkage)
            {
                cb_log_debug("*: " BITMASKFMT " %p @ %ju (%ju+%ju)",
                             BITMASK(curr->lower_bound),
                             curr,
                             (uintmax_t)curr->lower_bound,
                             (uintmax_t)lbset->lowest_bound,
                             (uintmax_t)(curr->lower_bound - lbset->lowest_bound));
            }

            LIST_FOREACH_SAFE(curr, &redistribute_list, linkage, tmp)
            {
                cb_offset_t diff = curr->lower_bound - lbset->lowest_bound;
                unsigned int bucket = bucket_for(diff);

                cb_log_debug("Re-adding %p @ %ju (%ju+%ju) to bucket[%u]",
                             curr,
                             (uintmax_t)curr->lower_bound,
                             (uintmax_t)lbset->lowest_bound,
                             (uintmax_t)diff,
                             bucket);

                LIST_INSERT_HEAD(&(lbset->head[bucket]), curr, linkage);
            }
        }

        heavy_assert(cb_lb_set_validate(lbset));
    }
    cb_log_debug("End advance");
}


void
cb_lb_set_debug(void)
{
    for (unsigned int i = 0; i < 64; ++i)
        bucket_for(i);
}


int
cb_lb_set_add(struct cb_lb_set   *lbset,
              struct cb_lb_entry *lbentry)
{
    /*
     * The to-be-inserted entry must have a lower bound greater than the lowest
     * existing entry.
     */
    assert(lbset->num_entries == 0 ||
           cb_offset_cmp(lbentry->lower_bound, lbset->lowest_bound) == 1);

    if (lbset->num_entries == 0)
    {
        lbset->lowest_bound = lbentry->lower_bound;

        cb_log_debug("Adding %p @ %ju (+0, first element) to bucket[0]",
                     lbentry,
                     (uintmax_t)lbentry->lower_bound);

        LIST_INSERT_HEAD(&(lbset->head[0]), lbentry, linkage);
    }
    else
    {
        cb_offset_t diff = lbentry->lower_bound - lbset->lowest_bound;
        unsigned int bucket = bucket_for(diff);

        /*
         * The cb_lb_set is not allowed to contain the same offset more than
         * once.
         */
        assert(diff != 0);

        cb_log_debug("Adding %p @ %ju (+%ju) to bucket[%u]",
                     lbentry,
                     (uintmax_t)lbentry->lower_bound,
                     (uintmax_t)diff,
                     bucket);

        LIST_INSERT_HEAD(&(lbset->head[bucket]), lbentry, linkage);
    }
    ++(lbset->num_entries);

    heavy_assert(cb_lb_set_validate(lbset));
    return 0;
}


int
cb_lb_set_remove(struct cb_lb_set   *lbset,
                 struct cb_lb_entry *lbentry)
{
    cb_log_debug("Removing %p @ %ju",
                 lbentry,
                 (uintmax_t)lbentry->lower_bound);

    LIST_REMOVE(lbentry, linkage);
    --(lbset->num_entries);
    if (lbentry->lower_bound == lbset->lowest_bound)
        cb_lb_set_advance(lbset);
    heavy_assert(cb_lb_set_validate(lbset));
    return 0;
}


struct cb_lb_entry*
cb_lb_set_get_lowest_entry(struct cb_lb_set *lbset)
{
    struct cb_lb_entry *lowest_entry = NULL;

    if (lbset->num_entries > 0)
    {
        lowest_entry = LIST_FIRST(&(lbset->head[0]));
        assert(lbset->lowest_bound == lowest_entry->lower_bound);
    }

    return lowest_entry;
}

